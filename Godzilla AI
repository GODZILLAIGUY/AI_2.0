import React, { useState } from "react";

const GOOGLE_API_KEY = "AIzaSyCoPUrfu6TqUpXZpLd2c0A0n__vCjTkrRY"; // Use your API key
const GOOGLE_CX = "11af82970860d4bbc"; // Use your Custom Search Engine ID (CX)


const AiTool: React.FC = () => {
  const [messages, setMessages] = useState<{ sender: string; text: string }[]>([
    {
      sender: "GodzillaAI",
      text: "Greetings, human! I am GodzillaAI, your self-learning assistant. How may I assist you today?",
    },
  ]);
  const [userInput, setUserInput] = useState("");

  // Function to simulate AI training (placeholder for actual ML model retraining)
  const trainAI = (userQuery: string, aiResponse: string) => {
    console.log("Training AI with new data:");
    console.log("User Query:", userQuery);
    console.log("AI Response:", aiResponse);

    // Append the data to a persistent storage or a training dataset.
    // You might use an API to save this on the server for retraining later.
  };

  // Function to query Google Search API
  const searchGoogle = async (query: string): Promise<string[]> => {
    try {
      const response = await fetch(
        `https://www.googleapis.com/customsearch/v1?key=${GOOGLE_API_KEY}&cx=${GOOGLE_CX}&q=${encodeURIComponent(
          query
        )}`
      );
      const data = await response.json();
      return data.items ? data.items.map((item: any) => item.snippet) : [];
    } catch (error) {
      console.error("Error fetching Google results:", error);
      return ["Unable to fetch information from Google."];
    }
  };

  // Function to handle user input and generate a response
  const handleSend = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!userInput.trim()) return;

    const userMessage = { sender: "You", text: userInput };
    setMessages((prev) => [...prev, userMessage]);

    // Generate an initial AI response
    const aiResponse = `Here's a preliminary answer based on my knowledge: ${generateResponse(
      userInput
    )}`;

    setMessages((prev) => [
      ...prev,
      { sender: "GodzillaAI", text: aiResponse },
    ]);

    // Fetch additional data from Google
    const googleResults = await searchGoogle(userInput);
    const refinedResponse =
      googleResults.length > 0
        ? `After verifying with Google, here are some insights:\n- ${googleResults.join(
            "\n- "
          )}`
        : "I couldn't find any additional information on Google.";

    setMessages((prev) => [
      ...prev,
      { sender: "GodzillaAI", text: refinedResponse },
    ]);

    // Train AI with the interaction
    trainAI(userInput, refinedResponse);

    setUserInput("");
  };

  // Placeholder function for AI's initial response generation
  const generateResponse = (query: string): string => {
    const responses = [
      "That's a great question!",
      "Hmm, let me think...",
      "Interesting! Let me see what I can find.",
      "I'll do my best to answer that.",
    ];
    return responses[Math.floor(Math.random() * responses.length)];
  };

  return (
    <div className="chat-container bg-gray-100 rounded-lg p-4 shadow-lg">
      <div className="chat-box h-96 overflow-y-auto p-3 bg-white rounded-lg shadow-inner">
        {messages.map((msg, index) => (
          <div
            key={index}
            className={`message ${
              msg.sender === "You" ? "text-right text-blue-500" : "text-left text-gray-700"
            }`}
          >
            <p>
              <strong>{msg.sender}:</strong> {msg.text}
            </p>
          </div>
        ))}
      </div>
      <form className="mt-4 flex" onSubmit={handleSend}>
        <input
          type="text"
          className="flex-1 px-4 py-2 border rounded-l-lg focus:outline-none focus:ring"
          placeholder="Type your message..."
          value={userInput}
          onChange={(e) => setUserInput(e.target.value)}
        />
        <button
          type="submit"
          className="bg-blue-500 text-white px-4 py-2 rounded-r-lg hover:bg-blue-600"
        >
          Send
        </button>
      </form>
    </div>
  );
};

export default AiTool;
